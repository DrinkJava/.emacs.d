1#+Title: Emacs Config V2
#+Author: Nishant Maniam
#+Date: 2022-05-08


* Basic Config

Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~nish/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, JavaScript, Python etc.
#+begin_src emacs-lisp
  (use-package emacs
    :preface
    (defvar nish/indent-width 4) 
    :config
    (setq frame-title-format '("nishmacs") ; It's me!
          ring-bell-function 'ignore       ; minimise distraction
          frame-resize-pixelwise t) ;; Home is where the heart is

    (tool-bar-mode -1)  ;; no need
    (menu-bar-mode -1)

    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq-default indent-tabs-mode nil
                  tab-width nish/indent-width))

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Get Shell PATH to find executables
  (use-package exec-path-from-shell
    :straight t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )

#+end_src

** Replace on write.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :straight nil
    :config (delete-selection-mode +1))

#+END_SRC

* Colors and Themes and Layouts
Current used theme lib.
** [[https://github.com/domtronn/all-the-icons.el][All The Icons]]
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :config (setq all-the-icons-scale-factor 1.0))

  (use-package all-the-icons-completion
    :straight t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src


** [[https://github.com/ogdenwebb/emacs-kaolin-themes][Kaolin Themes]]
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t
    :config
    (load-theme 'kaolin-breeze t))
#+end_src
** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "What it do."
          dashboard-items '((recents . 5) (projects . 5) (agenda . 5) (registers . 5))
          dashboard-set-footer nil
          dashboard-projects-backend 'project-el))
#+end_src
** [[https://www.emacswiki.org/emacs/AnsiColor][Ansi-Color]]
Get some nice Term colors
#+begin_src emacs-lisp
  (use-package ansi-color
    :straight nil
    :config
    (defun colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    :hook (complilation-filter . colorize-compilation-buffer))

#+end_src
* Completions via Vertico, Marginalia, Consult, Orderless, Corfu.
** [[https://github.com/minad/marginalia/][Vertico]]
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cxsycle t)
    )
#+end_src
** [[https://github.com/minad/marginalia/][Marginalia]]
#+begin_src emacs-lisp
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :straight t
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src
** [[https://github.com/oantolin/orderless][Orderless]]
Better regexing for completion. 
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (basic)))))

  
#+end_src

#+RESULTS:

** [[https://github.com/minad/consult][Consult]]
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :straight t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("C-s" . consult-line)                   ;; orig. I-Search
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+end_src
** [[https://github.com/minad/corfu][Corfu]]
Completions in Buffer! (Replaces company)
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin


    :init
    (global-corfu-mode))



#+end_src
** [[https://github.com/minad/cape][Cape]]
And Cape for some completion backends.
#+begin_src emacs-lisp
  (use-package cape
    :straight t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src


* Org Mode!
** Basic Org setup
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :hook ((org-mode . visual-line-mode) (org-mode . org-indent-mode))
    :config (setq
             org-log-done t
             org-pretty-entities t)
    (define-key global-map "\C-ca" 'org-agenda) (define-key global-map "\C-cl" 'org-store-link)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (js . t)
       ))
    (setq org-babel-python-command "python3")
    )

  ;; (use-package org-bullets
  ;;   :straight t
  ;;   :hook (org-mode . org-bullets-mode))

  ;; Pretty bullets
  ;; [[https://github.com/minad/org-modern][Org-Modern]]
  (use-package org-modern
    :straight t
    :config (global-org-modern-mode))

  (defun my-org-confirm-babel-evaluate (lang body)
    (not (string= lang "python")))  ;don't ask for python
  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)

#+end_src

#+RESULTS:
: my-org-confirm-babel-evaluate


** Org Babel
#+begin_src emacs-lisp
  
#+end_src
** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(
          ("i" "Coding Interview" plain (file "~/notes/interviewing/interview-staging.org")
           (file "~/notes/interviewing/interview-template.org"))
          ))
  
#+end_src
** File Template Skeletons
#+begin_src emacs-lisp
  (define-skeleton coding-interview-skeleton
    "Inserts a blank interview org template."
    "Candidate: "
    > "#+Title: Interview - " str | "*** Candidate ***" \n
    > "#+Author: Nishant Maniam" \n
    > "#+Date: " \n \n
    > "* Introductions (2 min)" \n
    > "** Water Break?" \n
    > "** Who am I?" \n
    > "*** I'm Nish. Been working at AWS for a little over 3 years. Chat. Backend. Load. Ops. Feature Design bots. Attachments"\n
    > "*** May be typing. Network. Shadow." \n
    > "** Tips" \n
    > "*** Try to give examples in the last 3 years ish." \n
    > "*** Separate \"we\" from \"me\" and \"team\""\n
    > "* Background"\n \n
    > (LP-Ownership) \n
    > (LP-BiasForAction) \n
    > (Coding-DSAlgo) \n
    )


#+end_src
** Coding Interview Templating
#+begin_src emacs-lisp
  (defun LP-DeepDive ()
    "Just returns standard text for DeepDive LP questions in org bullet format"
    (concat
     "* LP - Deep Dive - 10\n"
     "Tell me about a situation that required you to dig deep to get to the root cause. How did you know you were focusing on the right things? What was the outcome? Would you have done anything differently?\n\n"
     "or\n"
     "Tell me about a time when you were trying to understand a complex problem on your team and you had to dig into the details to figure it out. Who did you talk with or where did you have to look to find the most valuable information? How did you use that information to help solve the problem?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n")
    )

  (defun LP-EarnTrust ()
    "Just returns standard text for Earntrust LP questions in org bullet format"
    (concat

     "* LP - Earn Trust - 10\n"
     "Tell me about a time when you had to communicate a change in direction that you anticipated people would have concerns with. What did you do to understand the concerns and mitigate them? Were there any changes you made along the way after hearing these concerns? How did you handle questions and/or resistance? Were you able to get people comfortable with the change? \n\n"
     "or\n"
     "Give me an example of a time when you were not able to meet a commitment. What was the commitment and what were the obstacles that prevented success? What was the impact to your customers/peers and what did you learn from it?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )

  (defun LP-InventAndSimplify ()
    "Just returns standard text for InventAndSimplify LP questions in org bullet format"
    (concat

     "* LP - Invent And Simplify - 10\n"
     "Give me an example of a complex problem you solved with a simple solution. What made the problem complex? How do you know your solution addressed the problem?\n\n"
     "or\n"
     "Tell me about a time when you were able to make something simpler for customers. What drove you to implement this change? What was the impact?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )

  (defun LP-Ownership ()
    "Just returns standard text for InventAndSimplify LP questions in org bullet format"
    (concat

     "* LP - Ownership - 10\n"
     "Give me an example of an initiative you undertook because you saw that it could benefit the whole company or your customers (or team), but wasn’t within any group’s individual responsibility so nothing was being done.\n\n"
     "or\n"
     "Describe a time when you didn't think you were going to meet a commitment you promised. How did you identify the risk and communicate it to stakeholders? Is there anything you would do differently?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )

  (defun LP-LearnAndBeCurious ()
    "Just returns standard text for InventAndSimplify LP questions in org bullet format"
    (concat

     "* LP - Learn And Be Curious - 10\n"
     "Describe a time when you took on work outside of your comfort area. How did you identify what you needed to learn to be successful? How did you go about building expertise to meet your goal? Did you meet your goal?\n\n"
     "or\n"
     "We all have things about ourselves we'd like to improve on at work. Give me an example of something that you've worked on to improve your overall work effectiveness. What resources did you identify to help you develop? What was the impact?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )


    (defun LP-InventAndSimplify ()
    "Just returns standard text for InventAndSimplify LP questions in org bullet format"
    (concat

     "* LP - Invent And Simplify - 10\n"
     "Give me an example of a complex problem you solved with a simple solution. What made the problem complex? How do you know your solution addressed the problem?\n\n"
     "or\n"
     "Tell me about a time when you were able to make something simpler for customers. What drove you to implement this change? What was the impact?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )


  (defun LP-DisagreeCommit ()
    "Just returns standard text for DisagreeCommit LP questions in org bullet format"
    (concat

     "* LP - Have Backbone, Disagree and Commit - 10\n"
     "Tell me about a time when you strongly disagreed with your manager or peer on something you considered very important to the business. What was it and how did you handle it? Knowing what you know now, would you do anything differently?\n\n"
     "or\n"
     "Often, we must make decisions as a group. Give me an example of a time you committed to a group decision even though you disagreed. What factors led you to commit to the decision? Would you make the same decision now?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )

  (defun LP-BiasForAction ()
    "Just returns standard text for Bias for Action  LP questions in org bullet format"
    (concat

     "* LP - Bias For Action - 10\n"
     "Give me an example of a calculated risk that you have taken where speed was critical. What was the situation and how did you handle it? What steps did you take to mitigate the risk? What was the outcome? Knowing what you know now, would you have done anything differently?\n\n"
     "or\n"
     "Tell me about a time when you worked against tight deadlines and didn't have time to consider all options before making a decision. How much time did you have? What approach did you take? What did you learn from the situation?\n\n"
     "** S - What was the problem/issue/request?\n"
     "** T - What was Challenging about this\n"
     "** A - What did you do?\n"
     "** R - What was the result?\n"
     )
    )


  (defun Coding-DSAlgo ()
    "Templating for a DSAlgo Question"
    (concat
     "* Coding - Data Structure and Algorithms - 35\n"
     "A software package requires a set of dependent packages to be installed first, before it can be installed. Given a list of packages and their dependencies, return a functional installation order.\n"
     "Every package in the input must be installed. Packages should not attempt installation twice (i.e. the returned order should have only unique packages)\n\n"
     "Spending some time talking (7min) before moving on to code\n"
     "** Communication\n"
     "** TimeComplexity\n"
     "** EdgeCases\n"
     "** Bar\n"
     "** Code\n"
     "#+begin_src\n"
     "code go here\n"
     "#+end_src"
     )
    )

  (defun Coding-LogicalAndMaintainable ()
    "Templating for a L+M Question"
    (concat
     "* Coding - Logical and Maintainable - 35\n"
     "A CTR is a contact trace record, containing details of a conversation between a customer and agent. Imagine that this is stored as a json file with fields corresponding to different details about the conversation. Some basic details include the start and end timestamps, the contactId (uniq id), the names of the agent and customer, and the transcript of the conversation.\n"
     "Come up with a re-useable and extensible library for searching through CTR datasets.\n"
     "A basic library should be able to take start and end dates as a filter input, "
     "Spending some time talking (7min) before moving on to code\n"
     "** Communication\n"
     "** TimeComplexity\n"
     "** EdgeCases\n"
     "** Bar\n"
     "** Code\n"
     "#+begin_src\n"
     "code go here\n"
     "#+end_src"
     )
    )

#+end_src

* Magit!
** Its maaagic
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status))
#+end_src
* Programming Languages / Syntax Highlighting
** [[https://github.com/emacs-typescript/typescript.el][TypeScript Mode]]
#+begin_src emacs-lisp
  (use-package typescript-mode
    :straight t
    :config
    (define-derived-mode typescriptreact-mode typescript-mode
      "TypeScript TSX")

    ;; use our derived mode for tsx files
    ;; (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
    ;; by default, typescript-mode is mapped to the treesitter typescript parser
    ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx


  (use-package tsi
    :straight (tsi :type git :host github :repo "orzechowskid/tsi.el")

    :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
    :init
    (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
    (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
    (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
    (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))

#+end_src


** [[https://github.com/joaotavora/eglot][Eglot]]
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :init
    (add-hook 'typescript-mode-hook 'eglot-ensure)
    )
#+end_src
** [[https://emacs-tree-sitter.github.io/][Tree Sitter]]
#+begin_src emacs-lisp
  (use-package tree-sitter
    :straight t
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

    (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

    )

  (use-package tree-sitter-langs
    :straight t
    :after tree-sitter)

#+end_src
* Amazon
** [[https://code.amazon.com/packages/EmacsAmazonLibs/trees/mainline][EmacsAmazonLibs]]
#+begin_src emacs-lisp
#+end_src
** 
* Other Useful Thingies
** [[https://github.com/justbur/emacs-which-key#melpa][Which Key]]
Learn what key bindings are available!
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))

#+end_src
** [[https://github.com/akermu/emacs-libvterm][VTerm]]
Amazing Terminal?
#+begin_src emacs-lisp
  (use-package vterm
    :straight t)

#+end_src
