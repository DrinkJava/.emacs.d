#+Title: Emacs Config V4
#+Author: Nishant Maniam
#+Date: 2024-12-26

* Basic Config

Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~nish/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, JavaScript, Python etc.
#+begin_src emacs-lisp
  (use-package emacs
    :preface
    (defvar nish/indent-width 4) 
    :config
    (setq frame-title-format '("nishmacs") ; It's me!
          ring-bell-function 'ignore       ; minimise distraction
          frame-resize-pixelwise t) ;; Home is where the heart is

    (tool-bar-mode -1)  ;; no need
    (menu-bar-mode -1)

    (electric-pair-mode 1)
    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq-default indent-tabs-mode nil
                  tab-width nish/indent-width))
    ;; Get Shell PATH to find executables
  (use-package exec-path-from-shell
    :straight t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    )


  #+end_src

** Path setup
#+begin_src emacs-lisp
  (add-to-list 'exec-path "Users/nmmaniam/.local/share/mise/installs/node/latest/bin")

#+end_src





** Replace on write.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :straight nil
    :config (delete-selection-mode +1))

#+END_SRC


* Colors and Themes and Layouts
Current used theme lib.
** [[https://github.com/domtronn/all-the-icons.el][All The Icons]]
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :config (setq all-the-icons-scale-factor 1.0))

  (use-package all-the-icons-completion
    :straight t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src


** [[https://github.com/ogdenwebb/emacs-kaolin-themes][Kaolin Themes]]
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t)
#+end_src

** [[https://www.nordtheme.com/docs/ports/emacs/installation][Nord Theme]]
#+begin_src emacs-lisp
  (use-package nord-theme
    :straight t)
#+end_src

** Leuven
#+begin_src emacs-lisp
  (use-package leuven-theme
    :straight t
    :config
    (load-theme 'leuven t))
#+end_src

#+RESULTS:
: t

** [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "What it do."
          dashboard-items '((recents . 5) (projects . 5) (agenda . 5) (registers . 5))
          dashboard-set-footer nil
          dashboard-projects-backend 'project-el))
#+end_src
** [[https://www.emacswiki.org/emacs/AnsiColor][Ansi-Color]]
Get some nice Term colors
#+begin_src emacs-lisp
  (use-package ansi-color
    :straight nil
    :config
    (defun colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    :hook (complilation-filter . colorize-compilation-buffer))

#+end_src


* PlantUML
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :config
    (setq plantuml-default-exec-mode 'jar)
    (setq plantuml-output-type "png")
    (setq plantuml-jar-path "/opt/homebrew/Cellar/plantuml/1.2024.5/libexec/plantuml.jar"))
#+end_src


#+begin_src emacs-lisp
  (use-package flycheck-plantuml
    :straight t
    :config
    (flycheck-plantuml-setup))
#+end_src

* Markdown / Readme
#+begin_src emacs-lisp
  (use-package markdown-mode
  :straight t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src


* Magit!
** Its maaagic
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status))
#+end_src

* FlyCheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
#+end_src



* Completions via Vertico, Marginalia, Consult, Orderless, Corfu.
** [[https://github.com/minad/marginalia/][Vertico]]
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cxsycle t)
    )
#+end_src


** [[https://github.com/minad/marginalia/][Marginalia]]
#+begin_src emacs-lisp
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :straight t
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src


** [[https://github.com/oantolin/orderless][Orderless]]
Better regexing for completion. 
#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (basic)))))


#+end_src


** [[https://github.com/minad/consult][Consult]]
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :straight t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src


** [[https://github.com/minad/corfu][Corfu]]
Completions in Buffer! (Replaces company)
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    ;; Optional customizations
    :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin


    :init
    (global-corfu-mode))



#+end_src
** [[https://github.com/minad/cape][Cape]]
And Cape for some completion backends.
#+begin_src emacs-lisp
  (use-package cape
    :straight t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

** [[https://github.com/joaotavora/eglot][Eglot]]
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :init
    (add-hook 'typescript-mode-hook 'eglot-ensure)
    )
#+end_src




* Other Useful Thingies
** [[https://github.com/justbur/emacs-which-key#melpa][Which Key]]
Learn what key bindings are available!
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))

#+end_src

#+RESULTS:
: t

** [[https://github.com/akermu/emacs-libvterm][VTerm]]
Amazing Terminal?
#+begin_src emacs-lisp
  (use-package vterm
    :straight t)

#+end_src


** [[https://elpa.nongnu.org/nongnu/eat.html][EAT Terminal]]
#+begin_src emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))
  (setq eat-enable-mouse t)
  (setq eat-term-name "xterm-256color")


  ;; For `eat-eshell-mode'.
  (add-hook 'eshell-load-hook #'eat-eshell-mode)

  ;; For `eat-eshell-visual-command-mode'.
  (add-hook 'eshell-load-hook #'eat-eshell-visual-command-mode)


#+end_src

* Clojure
#+begin_src emacs-lisp
  (use-package clojure-ts-mode
    :straight t)
#+end_src


* TreeSitter langs
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (clojure "https://github.com/sogaiu/tree-sitter-clojure" "master" "src")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

* Ninja-Dev-Sync
#+begin_src emacs-lisp
  (defvar nds-buffer-name "*ninja-dev-sync*")

  (defun ninja-dev-sync ()
    "Run `ninja-dev-sync` as an inferior process inside Emacs."
    (interactive)
    (let* ((buffer (get-buffer-create nds-buffer-name)))
      (make-comint-in-buffer "ninja-dev-sync" buffer  "ninja-dev-sync")
      (when buffer
        (pop-to-buffer buffer))))
#+end_src

* Org Roam
Org-Roam package!
#+begin_src emacs-lisp
  (use-package org-roam
    :straight t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/nish-roam/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)    
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
    #+end_src

    #+RESULTS:
    : org-roam-dailies-capture-tomorrow



** [[https://github.com/org-roam/org-roam-ui][Org-roam-ui]]
#+begin_src emacs-lisp
  (use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
