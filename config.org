#+Title: Emacs Config
#+Author: Nishant Maniam
#+Date: 2020-01-01
* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~nish/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, JavaScript, Python etc.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar nish/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format '("nishmacs") ; It's me!
          ring-bell-function 'ignore       ; minimise distraction
          frame-resize-pixelwise t
          default-directory "~/workplace")

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq-default indent-tabs-mode nil
                  tab-width nish/indent-width))

#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organise under the same syntax as much as possible to keep the configuration consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~~ when configuring the built-in packages.
** Omit default startup screen
#+BEGIN_SRC emacs-lisp
  (use-package "startup"
    :config (setq inhibit-startup-screen t))
#+END_SRC
** Replace selection on insert.
Replace the active region just by typing text.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :config (column-number-mode +1))
#+END_SRC
** Split right and split below
The Emacs default split doesn't seem too intuitive for the majority of users.
#+BEGIN_SRC emacs-lisp
  (use-package "window"
    :preface
    (defun nish/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun nish/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'nish/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'nish/split-and-follow-vertically))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and better config for autosaves.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :config
    (setq confirm-kill-processes nil
          backup-directory-alist `(("." . "~/.emacs-saves"))
          make-backup-files t
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Only use eldoc in prog-mode (by defaults it's turned on globally, but reports say it hinders performance).
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config
    (global-eldoc-mode +1)
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default) to the more standard K&R. Here we also set the indentation width of C, C++, Java, JavaScript, and Python to the preferred value defined in ~nish/indent-width~. Of course, you can change the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :config
    (setq-default c-basic-offset nish/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; JavaScript
  (use-package js
    :config (setq js-indent-level 2))

  ;; Python (both v2 and v3)
  (use-package python
    :config (setq python-indent-offset nish/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximise the frame by default on start-up. Set the font to Menlo size 13, if Menlo is installed.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :config
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (when (member "Menlo" (font-family-list))
      (set-frame-font "menlo-13:weight=regular" t t)))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff

    :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace

    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :config
    (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC
* Third-party packages
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (use-package dracula-theme)
  (load-theme 'doom-one t)
#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "What it do."
          dashboard-items '((recents . 5) (projects . 5))
          dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers, operators, and escape sequences.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC

*** Icons!
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :config (setq all-the-icons-scale-factor 1.0))

(use-package all-the-icons-ivy
  :hook (after-init . all-the-icons-ivy-setup))
#+END_SRC
** Git Integration
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))

  (use-package magit-todos
    :config (magit-todos-mode))
#+END_SRC
** Searching/sorting enhancements
*** Ivy and Counsel
#+BEGIN_SRC emacs-lisp
   (use-package counsel
      :diminish
      :hook (ivy-mode . counsel-mode))
      ;; :config
      ;; (global-set-key (kbd "s-P") #'counsel-M-x)
      (global-set-key (kbd "s-f") #'counsel-grep-or-swiper)
      (global-set-key (kbd "C-s") #'counsel-grep-or-swiper)
      ;; (setq counsel-rg-base-command "rg --vimgrep %s"))

  (use-package ivy
    :diminish
    :hook (after-init . ivy-mode)
    :config
    (setq ivy-display-style nil)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "<escape>") #'minibuffer-keyboard-quit)
    (setq ivy-re-builders-alist
          '((counsel-rg . ivy--regex-plus)
            (counsel-projectile-rg . ivy--regex-plus)
            (counsel-ag . ivy--regex-plus)
            (counsel-projectile-ag . ivy--regex-plus)
            (swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy)))
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-initial-inputs-alist nil))


  (use-package swiper
    :after ivy
    :custom-face (swiper-line-face ((t (:foreground "#ffffff" :background "#60648E"))))
    :config
    (setq swiper-action-recenter t)
    (setq swiper-goto-start-of-match t))

  (use-package smex
    :after counsel)

#+END_SRC
*** Chords
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.03)) ; default 0.1
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
  :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-dabbrev-downcase nil
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC

#+RESULTS:
| company-mode | hes-mode | highlight-operators-mode | highlight-numbers-mode | electric-pair-mode |

*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2, h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
  :hook ((org-mode . visual-line-mode) (org-mode . org-indent-mode))
  :config (setq org-log-done t)
  (define-key global-map "\C-ca" 'org-agenda) (define-key global-map "\C-cl" 'org-store-link))
  (setq org-agenda-files (list "~/notes/work.org" "~/notes/WhisperFlows.org"))
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

#+RESULTS:
| org-bullets-mode | org-indent-mode | visual-line-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :config
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                (lambda ()
                  (setq my-company-point (point))))
    (advice-add 'company-complete-common
                :after
                (lambda ()
                  (when (equal my-company-point (point))
                    (yas-expand)))))
#+END_SRC
*** Dumb-Jump
Jump to Code definitions with "jl" jump back with "jb"
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump

  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :chords (("jl" . dumb-jump-go)
       ("jb" . dumb-jump-back))
  :config
  (setq dumb-jump-selector 'ivy)
  (setq dumb-jump-prefer-searcher 'rg))
#+END_SRC
*** Programming Modes
Markdown mode and JSON/Js2 mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :hook (markdown-mode . visual-line-mode))
  (use-package js2-mode)
  (use-package json-mode)
#+END_SRC
YAML Mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
Clojure Mode and CIDER
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode)
  (use-package cider)
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode :commands lsp)
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp :commands company-lsp)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-java :after lsp
    :hook (java-mode . lsp))
#+END_SRC
*** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package tide

  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
#+END_SRC
** Projects
*** Projectile...
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish
  :bind-keymap ("C-c p" . projectile-command-map)
  :chords (("pf" . projectile-find-file)
       ("pr" . projectile-ripgrep))
  :config
  (projectile-mode +1))

(use-package counsel-projectile
  :config (counsel-projectile-mode +1))

#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the modeline. It provides the ~:diminish~ keyword we've been using in other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
* GPG
** EPA Mode setup
#+BEGIN_SRC emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+END_SRC emacs-lisp
